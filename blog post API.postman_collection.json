{
	"info": {
		"_postman_id": "3d78b7bf-98b8-4950-8085-7af5dcb3ea94",
		"name": "blog post API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7702729"
	},
	"item": [
		{
			"name": "Get data all",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost/blog-api/api/posts",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"blog-api",
						"api",
						"posts"
					]
				},
				"description": "### GET /api/posts\n\nThis endpoint retrieves a list of blog posts.\n\n#### Request\n\nNo request body is required for this endpoint.\n\n#### Response\n\nThe response will be a JSON array containing the details of blog posts. Each post object will include the following properties:\n\n- `id` (string): The unique identifier of the post.\n    \n- `title` (string): The title of the post.\n    \n- `author` (string): The author of the post.\n    \n- `content` (string): The content of the post.\n    \n- `createdAt` (string): The timestamp when the post was created.\n    \n- `updatedAt` (string): The timestamp when the post was last updated.\n    \n\nExample:\n\n``` json\n[\n    {\n        \"id\": \"123\",\n        \"title\": \"Sample Title\",\n        \"author\": \"John Doe\",\n        \"content\": \"This is a sample blog post.\",\n        \"createdAt\": \"2022-01-01T12:00:00Z\",\n        \"updatedAt\": \"2022-01-01T12:00:00Z\"\n    },\n    {\n        \"id\": \"124\",\n        \"title\": \"Another Title\",\n        \"author\": \"Jane Smith\",\n        \"content\": \"This is another blog post.\",\n        \"createdAt\": \"2022-01-02T09:00:00Z\",\n        \"updatedAt\": \"2022-01-02T09:00:00Z\"\n    }\n]\n\n ```"
			},
			"response": []
		},
		{
			"name": "Get ID data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost/blog-api/api/posts/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"blog-api",
						"api",
						"posts",
						"1"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Post data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Blog 26\",\n    \"content\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\",\n    \"author\": \"John Doe\"\n}"
				},
				"url": {
					"raw": "http://localhost/blog-api/api/posts",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"blog-api",
						"api",
						"posts"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Update data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Blog 26\",\n    \"content\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\" \n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/blog-api/api/posts/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"blog-api",
						"api",
						"posts",
						"1"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							"// Add a test to check the length of the response data",
							"pm.test(\"Response data length is 0\", function () {",
							"    pm.expect(pm.response.text()).to.have.lengthOf(0);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/blog-api/api/posts",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"blog-api",
						"api",
						"posts"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}